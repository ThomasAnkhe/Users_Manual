# -*- coding: utf-8 -*-
"""Alignment SM (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GUcOxVQlYR18sSsIVhagt7SEMTRQz3he
"""

import numpy as np
import matplotlib.pyplot as plt

Npixeles=256
NI=1 #Número de imágenes RAW
NF=1 #Número de imágenes FF
NThr=2
#nameP="Simulaciones"
#nameI="G4MProc"
#nameV="TestMNI"
#nameF="Alignment"
#nameD="32"
#nameH="RAW"
#Step="13.8"
#nameS="PData"
#nameFF=nameP+"/"+nameI+"/"+nameV+"/"+nameF+"/"+nameD+"/"+nameH+Step
nameFF="TomaFF"

def ImagenesR(name,Npixeles):
    I=[]
    for k in range(0,len(name),Npixeles*Npixeles):
        Im=np.zeros((Npixeles,Npixeles))
        for j in range(Npixeles):
            for i in range(Npixeles):
                Im[j,i]=name[i+Npixeles*j+k]
        I.append(Im)
    return I

def Imagenes(name,Npixeles,NI):
    D=[]
    for i in range(1,NI+1):
        Raw = np.fromfile(name+".raw", dtype='float32')
        K=ImagenesR(Raw,Npixeles)
        D.append(K)
    return D

def ImagenesA(name,Npixeles,NI,NThr):
    A=[]
    for i in range(NThr):
        Mean=np.zeros((Npixeles, Npixeles))
        for j in range (NI):
            Mean=Mean+name[j][i]
        A.append(Mean)
    return A

def PI(name,inicial,final,h,y):
    P=np.zeros(y-h)
    for i in range(inicial,final):
        P=P+name[i,h:y]
    mean=P/(final-inicial)
    return mean

def Aver(name,X1,X2,Step):
    P=np.copy(name)
    for i in range(len(P)):
        P[i,X1:X2]=(1/2)*(P[i,X1-Step:X2-Step]+P[i,X1+Step:X2+Step])
    return P

FF=Imagenes(nameFF,Npixeles,NF)
FFA=ImagenesA(FF,Npixeles,NF,NThr)

k=1
fig, ax = plt.subplots(figsize=(7, 7))
u=ax.imshow(FFA[k], cmap="bone")
fig.colorbar(u,ax=ax,location='right', anchor=(0.5, 0.5), shrink=0.82,aspect=12)

plt.plot(PI(FFA[k],0,256,0,256), '-', color="red")
plt.xlabel("Pixels",fontsize=14)
plt.ylabel("Intensity",fontsize=14)
plt.grid(linestyle = '--', linewidth = 0.5)

FFAe=FFA[k][:,::2]
FFAo=FFA[k][:,1::2]

GNMe=plt.hist(np.ravel(FFAe),bins=52,color="red",label="Even", alpha=0.6)
GNMo=plt.hist(np.ravel(FFAo),bins=52,color="green",label="Odd", alpha=0.8)
#plt.title("Step "+Step+" $\mu$m - "+nameD+" keV", fontsize=16)
plt.legend()

np.savetxt("TomaFF.txt",FFA[k])

